//there's actually 3 entities but we put 4 so there's no overlapping lines. We assert that the data is NOT flowing thru some middleman 






User sends request to server for root of site
We deliver HTML form for them to fill out to capture single input task
Server saves task into array task_dates, indexed by random generated key "state"

Respond with 302 redirect - 302 is status code for temporary redirect; sends new request to location specified by header's location- the scope tells API which permissions the app is requesting, state returns unchanged so we can identify originating request and data associated with it; supplied by embedding values into redirect url by query parameters; once received, browser finsihes request and starts new one with redirect url
user is directly communicating with API's authentication servers



User may log in without application's involvement
User enters username and Password


Logged in at this point

API prompts user with list of scopes the API is requesting and whether they accept the release of these permissions
For simplicity, we assume they do

After logging in user's explicit grant permission,


API sends 302 redirect back to server using oauth redirect url we had specified initially- querystring format has 2 pieces of data: code represents user's explicit permission to given client_id permission to access specific scopes for personal account, and state is same value originally received (originally used for original task for array_task date)
Because of the 302 redirect, browser finishes request with todoist endpoint and opens new one up with redirectory url with forwarding url back to app server

Before we interact with user's account, we prove with user's explicit permission to interact and proof that app owns specific client_id using client_secret; client_id only identifies app (username) and client_secret proves ownership of client_id (password); th API will check if thee values are valid, and if everything works, it returns access token which allows app to use API and interact with user's resources as long as access token is valid



That's the end of 3-legged oauth flow- from now on, app includes access_token inside headers every time it wants to access user's resources and 
Send post request to endpoint rest/v1/task- in order to create new task "Mow the Lawn"


We get back response with metadata, including url that points to permalink with created task

Application sends one last 302 redirect to user, redirecting them to results